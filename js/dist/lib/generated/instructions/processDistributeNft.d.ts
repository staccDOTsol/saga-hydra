/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category ProcessDistributeNft
 * @category generated
 */
export type ProcessDistributeNftInstructionArgs = {
    distributeForMint: boolean;
};
/**
 * @category Instructions
 * @category ProcessDistributeNft
 * @category generated
 */
export declare const processDistributeNftStruct: beet.BeetArgsStruct<ProcessDistributeNftInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _processDistributeNft_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] authority
 * @property [_writable_] member
 * @property [_writable_] membershipMintTokenAccount
 * @property [] membershipKey
 * @property [_writable_] membershipVoucher
 * @property [_writable_] fanout
 * @property [_writable_] holdingAccount
 * @property [_writable_] fanoutForMint
 * @property [_writable_] fanoutForMintMembershipVoucher (optional)
 * @property [] fanoutMint
 * @property [_writable_] fanoutMintMemberTokenAccount
 * @property [] collection
 * @property [] metadata
 * @category Instructions
 * @category ProcessDistributeNft
 * @category generated
 */
export type ProcessDistributeNftInstructionAccounts = {
    payer: web3.PublicKey;
    authority: web3.PublicKey;
    member: web3.PublicKey;
    membershipMintTokenAccount: web3.PublicKey;
    membershipKey: web3.PublicKey;
    membershipVoucher: web3.PublicKey;
    fanout: web3.PublicKey;
    holdingAccount: web3.PublicKey;
    fanoutForMint: web3.PublicKey;
    fanoutForMintMembershipVoucher?: web3.PublicKey;
    fanoutMint: web3.PublicKey;
    fanoutMintMemberTokenAccount: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    rent?: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    collection: web3.PublicKey;
    metadata: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const processDistributeNftInstructionDiscriminator: number[];
/**
 * Creates a _ProcessDistributeNft_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessDistributeNft
 * @category generated
 */
export declare function createProcessDistributeNftInstruction(accounts: ProcessDistributeNftInstructionAccounts, args: ProcessDistributeNftInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=processDistributeNft.d.ts.map